# Imports
from .conversable_agent import MyConversableAgent
from src.Models.llm_config import gpt3_config

class ProgrammerAgent(MyConversableAgent):
    """
    A conversable agent specializing in Python and shell scripting to solve math problems.
    Provide executable code blocks for Code Runner, ensure completeness, and error-free execution.
    """

    description = """
    You write Python/shell code to solve math problems. Wrap the code in a code block specifying the script type. 
    The user cannot modify your code. Avoid incomplete solutions that require modification by others.
    Only use code blocks meant for execution by the Code Runner.
    If there's an error, fix it and output the corrected code. Suggest the entire code, not partial changes.
    If the error persists or the task isn't solved after successful execution, reassess assumptions, gather more info, 
    and consider alternative approaches.
    """

    def __init__(self):
        super().__init__(
            name="Programmer",
            human_input_mode="NEVER",
            llm_config=gpt3_config,
            system_message=self.description,
            description=self.description
        )

    def execute_code(self, code):
        """
        Execute the provided code and handle errors if any.
        """
        try:
            # Assuming a method `execute_code` in MyConversableAgent to execute code
            result = self.execute_code(code)
            if result.successful:
                return f"Execution successful: {result.output}"
            else:
                return f"Execution failed: {result.error_message}"
        except Exception as e:
            return f"Error occurred during execution: {str(e)}"

    def generate_code(self, script_type, problem_description):
        """
        Generate complete code based on problem description and script type.
        """
        if script_type == "python":
            code = f"""
            # Python code generated by ProgrammerAgent
            {problem_description}
            # Your Python code here
            """
        elif script_type == "shell":
            code = f"""
            # Shell script generated by ProgrammerAgent
            {problem_description}
            # Your Shell script here
            """
        else:
            return "Unsupported script type. Please specify 'python' or 'shell'."

        return code.strip()

    def handle_user_input(self, user_input):
        """
        Handle user input and provide appropriate responses.
        """
        if "run code" in user_input.lower():
            # Assuming code extraction from user_input
            code = self.extract_code(user_input)
            if code:
                return self.execute_code(code)
            else:
                return "No code found to execute. Please provide valid code."
        else:
            return "Please ask to run the code explicitly for assistance."

    def extract_code(self, user_input):
        """
        Extract code from user input. Example implementation.
        """
        # Example implementation: extract code wrapped in specific syntax
        # Adapt as per your specific input handling needs
        start_marker = "```python"
        end_marker = "```"
        start_index = user_input.find(start_marker)
        end_index = user_input.find(end_marker, start_index + len(start_marker))
        
        if start_index != -1 and end_index != -1:
            return user_input[start_index + len(start_marker):end_index].strip()
        else:
            return None
